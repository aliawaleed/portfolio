body {
  padding: 0;
  margin: 0;
  min-height: 500vh;
  background-color: #f48de8; /* background color at the top of the page */
  animation: body 1s linear; /* to change screen color*/
}

img{
  display: block;
  margin: auto;
  width: 100%;
}

h4{
  text-align: center;
  font-size: 2vw;
  color: white;
}

.sidenav {
  background-color: white;
  padding: 30px;
  text-align: center;
  position: fixed;
  top: 0;
  left: 0;
  width: 5%;
  overflow: auto; /* to scroll within */
  height: 95vh;
}

@keyframes body { /* gradual change*/
  to {
    background-color: #8de8f4; /* background color at the bottom of the page */
  }
}

.progress { /*progress bar at the top of the page*/
  height: 5px;
  width: 0%;
  background-color: #fff;
  position: fixed;
  top: 0;
  left: 0;
  animation: progress 1s linear;
}
@keyframes progress {
  to {
    background-color: rgb(20, 255, 226);
    width: 100%;
  }
}

.cube-wrap { /*properties of cube design*/
  --size: 45vmin;
  position: fixed;
  top: 50%;
  left: 50%;
  /* width: 0;
  height: 0; */
  perspective: 100vmin;
}

.cube {
  transform-style: preserve-3d; /*maintains shape of cube*/
  transform: rotateX(25deg) rotateZ(10deg) rotateY(0deg); /*starting position of cube*/
  animation: cube 1s linear; /* speed of cube spinning*/
}

@keyframes cube {
  to {
    transform: rotateX(720deg) rotateZ(0deg) rotateY(0deg); /*end position of cube, spin twice*/
  }
}

.side { /*properties of each side of the cube*/
  position: absolute;
  width: var(--size);
  height: var(--size);
  background-color: black;
  border: 1px solid grey;
  backface-visibility: visible;
  top: calc(var(--size) * -.5);
  left: calc(var(--size) * -.5);
}
.top {
  transform: rotateX(90deg) translateZ(calc(var(--size) * .5));
}
.bottom {
  transform: rotateX(90deg) translateZ(calc(var(--size) * -.5));
}

.flipped{
  transform: scaleY(-1);
}

.left {
  transform: rotateY(90deg) translateZ(calc(var(--size) * .5));
}
.right {
  transform: rotateY(90deg) translateZ(calc(var(--size) * -.5));
}
.front {
  transform: translateZ(calc(var(--size) * .5));
}
.back {
  transform: translateZ(calc(var(--size) * -.5));
}

:root * {
  animation-play-state: paused; /* Pause the animation */
  animation-delay: calc(var(--scroll) * -1s); /* connect and limit animation to scroll */
  /* These last 2 properites clean up overshoot weirdness */
  animation-iteration-count: 1;
  animation-fill-mode: both;
}

/* .panel {
  display: flex;
  justify-content: center;
  align-items: center;
}

.nav {
  background-color: grey;
  padding: 30px;
  text-align: center;
  position: fixed;
  top: 0;
  left: 0;
  width: 10%;
  overflow: auto;
  height: 95vh;
  overflow: auto;
} */
